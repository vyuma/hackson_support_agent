import os
from typing import List
from langchain.prompts import ChatPromptTemplate
from langchain.output_parsers import ResponseSchema, StructuredOutputParser
from json_repair import repair_json


bad_json = """

```json\n{\n  "tasks": [\n    {\n      "task_name": "要件定義",\n      "priority": "Must",\n      "content": "要件定義を行う",\n      "detail": "要件定義の具体的な手順:\\n1. **目的の明確化:** ハッカソンで何を達成したいのか、具体的な目的をチームで共有し、文書化します。\\n   例: 「地域の高齢者向けに、地域のイベント情報を簡単に検索・共有できるアプリを開発する」\\n2. **ターゲットユーザーの特定:** 誰のためのアプリなのかを明確にします。年齢層、ITスキル、ニーズなどを具体的に定義します。\\n   例: 「70代以上の高齢者、スマートフォン初心者、地域のイベントに興味がある」\\n3. **必要な機能の洗い出し:** ターゲットユーザーのニーズを満たすために、どのような機能が必要かをブレインストーミングします。優先順位をつけます。\\n   例:\\n     *   Must: イベント情報の検索機能、イベント情報の表示機能、文字サイズ変更機能\\n     *   Should: 音声読み上げ機能、お気に入り登録機能、イベント情報の共有機能\\n     *   Could: 地図表示機能、イベントへの参加申し込み機能\\n4. **制約条件の確認:** ハッカソンの期間、利用可能な技術、チームメンバーのスキルなどを考慮し、実現可能な範囲で要件を絞り込みます。\\n5. **要件定義書の作成:** 上記の内容をまとめ、要件定義書を作成します。チーム内で共有し、合意を得ます。\\n   *   ドキュメント例：Google Docs, Markdownファイル\\n6. **プロトタイプの作成（任意）:** 簡単なプロトタイプを作成し、要件が満たされているかを確認します。FigmaやAdobe XDなどのツールが利用できます。\\n\\n**初心者向け補足:**\\n*   最初は完璧な要件定義を目指さず、必要に応じて修正していくことを前提に進めましょう。\\n*   チームメンバーと密にコミュニケーションを取り、認識のずれがないように注意しましょう。"\n    },\n    {\n      "task_name": "画面設計",\n      "priority": "Must",\n      "content": "画面設計を行う",\n      "detail": "画面設計の具体的な手順:\\n1. **画面遷移図の作成:** アプリの画面間の流れを視覚的に表現します。どの画面からどの画面へ遷移するかを明確にします。\\n   *   例：トップ画面 -> イベント一覧画面 -> イベント詳細画面\\n2. **ワイヤーフレームの作成:** 各画面のレイアウトを簡単にスケッチします。要素の配置、ボタンの位置、テキストの表示などを決定します。\\n   *   Figma, Adobe XD, Balsamiq Mockupsなどのツールが利用できます。\\n   *   紙とペンでもOKです。\\n3. **UIデザインの作成:** ワイヤーフレームを元に、色、フォント、アイコンなどのUI要素を決定します。ターゲットユーザーに合わせたデザインを心がけます。\\n   *   高齢者向けアプリの場合は、文字サイズを大きく、コントラストを高くするなど、視認性を重視します。\\n4. **プロトタイプの作成:** UIデザインを元に、実際に操作できるプロトタイプを作成します。ユーザーテストを行い、使いやすさを検証します。\\n   *   Figma, Adobe XDなどのツールが利用できます。\\n5. **デザインガイドラインの作成:** チーム全体でUIデザインの統一性を保つために、デザインガイドラインを作成します。色、フォント、アイコンなどのルールを定めます。\\n\\n**初心者向け補足:**\\n*   最初はシンプルなデザインから始め、徐々に改善していくことをおすすめします。\\n*   他のアプリのデザインを参考に、良い点を取り入れましょう。\\n*   ユーザーテストを積極的に行い、ユーザーの意見を取り入れましょう。"\n    },\n    {\n      "task_name": "実装",\n      "priority": "Must",\n      "content": "実装を行う",\n      "detail": "実装の具体的な手順:\\n1. **開発環境の構築:** 必要な開発ツールをインストールし、開発環境を構築します。\\n   *   例: VSCode, Android Studio, Xcode\\n2. **プログラミング言語の選択:** アプリの目的やチームメンバーのスキルに合わせて、適切なプログラミング言語を選択します。\\n   *   例: Kotlin (Android), Swift (iOS), JavaScript (React Native, Ionic)\\n3. **バックエンドの構築（必要な場合）:** サーバーサイドの処理が必要な場合は、バックエンドを構築します。\\n   *   例: Node.js, Python (Flask, Django), Ruby on Rails\\n4. **APIの設計と実装（必要な場合）:** バックエンドと連携するためのAPIを設計し、実装します。\\n   *   REST APIが一般的です。\\n5. **フロントエンドの実装:** UIデザインを元に、画面を実装します。\\n   *   UIフレームワーク (React, Vue.js, Angular) を利用すると効率的です。\\n6. **テスト:** 実装した機能をテストし、バグを修正します。\\n   *   単体テスト、結合テスト、UIテストなどを行います。\\n7. **デプロイ:** アプリをストアに公開します。\\n   *   Google Play Store, App Store\\n\\n**初心者向け補足:**\\n*   最初は簡単な機能から実装し、徐々に複雑な機能を追加していくことをおすすめします。\\n*   バージョン管理システム (Git) を利用し、コードを管理しましょう。\\n*   エラーメッセージをよく読み、原因を特定しましょう。\\n*   詰まったら、積極的に質問しましょう。\\n\\n**コード例 (JavaScript, React Native):**\\n```javascript\\n// イベント一覧を表示するコンポーネント\\nfunction EventList() {\\n  const [events, setEvents] = useState([]);\\n\\n  useEffect(() => {\\n    // APIからイベント情報を取得する\\n    fetch(\'/api/events\')\\n      .then(response => response.json())\\n      .then(data => setEvents(data));\\n  }, []);\\n\\n  return (\\n    \\n      {events.map(event => (\\n        <EventItem key={event.id} event={event} />\\n      ))}\\n    \\n  );\\n}\\n\\nexport default EventList;\\n```"\n    }\n  ]\n}\n```' additional_kwargs={} response_metadata={'prompt_feedback': {'block_reason': 0, 'safety_ratings': []}, 'finish_reason': 'STOP', 'safety_ratings': []} id='run-89c7fdf3-b4e5-4e06-8696-270f61a11461-0' usage_metadata={'input_tokens': 527, 'output_tokens': 1413, 'total_tokens': 1940, 'input_token_details': {'cache_read': 0}}
[{'task_name': '要件定義', 'priority': 'Must', 'content': '要件定義を行う' 'detail': '要件定義の具体的な手順:\n1. **目的の明確化:** ハッカソンで何を達成したいのか、具体的な目的をチームで共有し、文書化します。\n   例: 「地域の高齢者向けに、地域のイベント情報を簡単に検索・共有できるアプリを開発する」\n2. **ターゲットユーザーの特定:** 誰のためのアプリなのかを明確にします。年齢層、ITスキル、ニーズなどを具体的に定義します。\n   例: 「70代以上の高齢者、スマートフォン初心者、地域のイベントに興味がある」\n3. **必要な機能の洗い出し:** ターゲットユーザーのニーズを満たすために、どのような機能が必要かをブレインストーミングします。優先順位をつけます。\n   例:\n     *   Must: イベント情報の検索機能、イベント情報の表示機能、文字サイズ変更機能\n     *   Should: 音声読み上げ機能、お気に入り登録機能、イベント情報の共有機能\n     *   Could: 地図表示機能、イベントへの参加申し込み機能\n4. **制約条件の確認:** ハッカソンの期間、利用可能な技術、チームメンバーのスキルなどを考慮し、実現可能な範囲で要件を絞り込みます。\n5. **要件定義書の作成:** 上記の内容をまとめ、要件定義書を作成します。チーム内で共有し、合意を得ます。\n   *   ドキュメント例：Google Docs, Markdownファイル\n6. **プロトタイプの作成（任意）:** 簡単なプロトタイプを作成し、要件が満たされているかを確認します。FigmaやAdobe XDなどのツールが利用できます。\n\n**初心者向け補足:**\n*   最初は完璧な要件定義を目指さず、必要に応じて修正していくことを前提に進めましょう。\n*   チームメンバーと密にコミュニケーションを取り、認識のずれがないように注意しましょう。'}, {'task_name': '画面設計', 'priority': 'Must', 'content': '画面設計を行う', 'detail': '画面設計の具体的な手順:\n1. **画面遷移図の作成:** アプリの画面間の流れを視覚的に表現します。どの画面からどの画面へ遷移するかを明確にします。\n   *   例：トップ画面 -> イベント一覧画面 -> イベント詳細画面\n2. **ワイヤーフレームの作成:** 各画面のレイアウトを簡単にスケッチします。要素の配置、ボタンの位置、テキストの表示などを決定します。\n   *   Figma, Adobe XD, Balsamiq Mockupsなどのツールが利用できます。\n   *   紙とペンでもOKです。\n3. **UIデザインの作成:** ワイヤーフレームを元に、色、フォント、アイコンなどのUI要素を決定します。ターゲットユーザーに合わせたデザインを心がけます。\n   *   高齢者向けアプリの場合は、文字サイズを大きく、コントラストを高くするなど、視認性を重視します。\n4. **プロトタイプの作成:** UIデザインを元に、実際に操作できるプロトタイプを作成します。ユーザーテストを行い、使いやすさを検証します。\n   *   Figma, Adobe XDなどのツールが利用できます。\n5. **デザインガイドラインの作成:** チーム全体でUIデザインの統一性を保つために、デザインガイドラインを作成します。色、フォント、アイコンなどのルールを定めます。\n\n**初心者向け補足:**\n*   最初はシンプルなデザインから始め、徐々に改善していくことをおすすめします。\n*   他のアプリのデザインを参考に、良い点を取り入れましょう。\n*   ユーザーテストを積極的に行い、ユーザーの意見を取り入れましょう。'}, {'task_name': '実装', 'priority': 'Must', 'content': '実装を行う', 'detail': "実装の具体的な手順:\n1. **開発環境の構築:** 必要な開発ツールをインストールし、開発環境を構築します。\n   *   例: VSCode, Android Studio, Xcode\n2. **プログラミング言語の選択:** アプリの目的やチームメンバーのスキルに合わせて、適切なプログラミング言語を選択します。\n   *   例: Kotlin (Android), Swift (iOS), JavaScript (React Native, Ionic)\n3. **バックエンドの構築（必要な場合）:** サーバーサイドの処理が必要な場合は、バックエンドを構築します。\n   *   例: Node.js, Python (Flask, Django), Ruby on Rails\n4. **APIの設計と実装（必要な場合）:** バックエンドと連携するためのAPIを設計し、実装します。\n   *   REST APIが一般的です。\n5. **フロントエンドの実装:** UIデザインを元に、画面を実装します。\n   *   UIフレームワーク (React, Vue.js, Angular) を利用すると効率的です。\n6. **テスト:** 実装した機能をテストし、バグを修正します。\n   *   単体テスト、結合テスト、UIテストなどを行います。\n7. **デプロイ:** アプリをストアに公開します。\n   *   Google Play Store, App Store\n\n**初心者向け補足:**\n*   最初は簡単な機能から実装し、徐々に複雑な機能を追加していくことをおすすめします。\n*   バージョン管理システム (Git) を利用し、コードを管理しましょう。\n*   エラーメッセージをよく読み、原因を特定しましょう。\n*   詰まったら、積極的に質問しましょう。\n\n**コード例 (JavaScript, React Native):**\n```javascript\n// イベント一覧を表示するコンポーネント\nfunction EventList() {\n  const [events, setEvents] = useState([]);\n\n  useEffect(() => {\n    // APIからイベント情報を取得する\n    fetch('/api/events')\n      .then(response => response.json())\n      .then(data => setEvents(data));\n  }, []);\n\n  return (\n    \n      {events.map(event => (\n        <EventItem key={event.id} event={event} />\n      ))}\n    \n  );\n}\n\nexport default EventList;\n```"}]
"""

data = repair_json(bad_json,ensure_ascii=False)
# json形式として正しいかを検証する

